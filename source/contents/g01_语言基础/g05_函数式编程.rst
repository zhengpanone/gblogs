======================================
函数式编程（Functional Programming）
======================================

高阶函数（Higher-Order Functions）
=====================================
函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！

高阶函数（Higher-Order Function）是指至少满足以下一个条件的函数：

1. 接收一个或多个函数作为参数
2. 返回一个函数作为结果

.. literalinclude:: ./code/g05/1_higher_order_functions.go
    :encoding: utf-8
    :language: golang

柯里化（Currying）
=========================

柯里化，这是将一个接收多个参数的函数分解成一系列各接收一个参数的函数。

柯里化的好处：

- 参数复用（Partial Application）
- 函数组合更灵活
- 更适合函数式编程风格

.. literalinclude:: ./code/g05/2_currying.go
    :encoding: utf-8
    :language: golang

不变性（Immutability）
=================================

函数式编程的特点之一是不变性。一旦构造了某样东西，就不会再改变。相反，如果你需要不同的东西，可以构建一个新的。这乍听起来可能有点浪费，但实际上却能保持整洁并减少副作用。

.. literalinclude:: ./code/g05/3_immutability.go
    :encoding: utf-8
    :language: golang

纯函数（Pure Functions）
===============================

纯函数是指：一个函数在相同的输入下，永远返回相同的输出，并且没有副作用（side effects）。

满足两个条件：

1. 相同输入，一定返回相同输出（确定性）
2. 没有副作用

  👉 不修改全局变量、不修改传入的参数、不读写文件、不打印日志、不发送请求等等。

算子（Operator）
======================

算子（Operator）就是一种处理数据的“操作函数”，它接收数据，做变换、过滤、聚合等处理，返回新的数据。
在代码中体现为：对集合/流/数据的转换、过滤、聚合等操作函数。

.. list-table:: 数据处理操作说明
   :header-rows: 1
   :widths: 15 15 50

   * - 类别
     - 名称
     - 作用说明
   * - 转换类
     - map
     - 对每个元素应用函数，返回新集合
   * - 过滤类
     - filter
     - 筛选出符合条件的元素
   * - 聚合类
     - reduce
     - 把多个元素归约成一个结果
   * - 扁平化
     - flatMap
     - 展开嵌套结构（数组 → 多个元素）
   * - 合并类
     - join, union
     - 合并两个数据流/集合

.. literalinclude:: ./code/g05/5_operator.go
    :encoding: utf-8
    :language: golang


https://mp.weixin.qq.com/s/dyT1-_-ZJkbMx6n5v4QklQ